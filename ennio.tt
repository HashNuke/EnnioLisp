module Ennio
    grammar Scheme

        rule program
            s_expression+ <Program>
        end

        rule l_paren
            '(' <LParen>
        end

        rule r_paren
            ')' <RParen>
        end

        rule s_expression
            space
            l_paren
            space
            ( 
                operator
                space
                ( value space )*
            )
            space
            r_paren
            space
            <SExpression>
        end

        rule operator
            (
                arithmetic_operator
                / relational_operator
                / logical_operator
                / dynamic_word
            )
            <Operator>
        end
        
        rule arithmetic_operator
            (
                "+"
                / "-"
                / "*"
                / "/"
                / "%"
            )
            <ArithmeticOperator>
        end    
            
        rule relational_operator
            (
                "="
                / "=!"
                / "<"
                / ">"
                / "<="
                / ">="
            )
            <RelationalOperator>
        end
        
        rule logical_operator
            ("and" / "or" / "not") <LogicalOperator>
        end

        rule dynamic_word
            [a-z]+ <DynamicWord>
        end

        rule value
            (
                integer
                / float
                / boolean
                / single_quoted_string
                / double_quoted_string
                / nil_value
                / dynamic_word
                / s_expression
            )
            <Value>
        end
       
        rule nil_value
            "nil" <NilNode>
        end

        rule list
            "'" space l_paren (value space)* r_paren <List>
        end

        rule integer
            [0-9]+ <IntegerNode>
        end

        rule float
            [0-9]* "." [0-9]+ <FloatNode>
        end
        
        rule boolean
            ("#t" / "#f") <BooleanNode> 
        end
        
        rule compulsory_space
            [\s\n\r\t] <Space>
        end

        rule space
            compulsory_space* <Space>
        end
        
        rule double_quoted_string
            '"' ('\\"' / [^"])* '"' <DoubleQuotedString>
        end

        rule single_quoted_string
            "'" ("\\'" / [^'])* "'" <SingleQuotedString>
        end
    end
end
